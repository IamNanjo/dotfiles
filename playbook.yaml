- name: Set up dotfiles
  hosts: localhost
  any_errors_fatal: true

  tasks:
    - name: Install packages for Arch
      become: true
      when: ansible_distribution == "Archlinux"
      community.general.pacman:
        name:
          - base
          - base-devel
          - git
          - curl
          - wget
          - zsh
          - ripgrep
          - fzf
          - plocate
          - stow
          - neovim

    - name: Download yay
      register: download_yay
      ansible.builtin.git:
        repo: https://aur.archlinux.org/yay.git
        dest: yay

    - name: Install yay
      register: install_yay
      changed_when: install_yay.rc == 0
      become: true
      when: ansible_distribution == "Archlinux"
      ansible.builtin.command:
        chdir: ./yay
        cmd: makepkg -si

    - name: Install packages for Ubuntu
      become: true
      when: ansible_distribution == "Ubuntu"
      ansible.builtin.apt:
        name:
          # == Lua build dependencies ==
          - build-essential
          - libreadline-dev
          # ============================
          - unzip
          - git
          - curl
          - wget
          - zsh
          - plocate
          - stow
        state: present

    - name: Check if mise is installed
      register: mise_installed
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.local/bin/mise"

    - name: Install mise
      when: not mise_installed.stat.exists
      register: install_mise
      changed_when: install_mise.rc == 0
      ansible.builtin.shell: set -o pipefail && curl https://mise.run | sh

    - name: Install mise tools
      register: install_mise_tools
      changed_when: install_mise_tools.rc == 0
      ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/mise use -g -y usage node bun go rust python lua@5.1"

    - name: Check if oh-my-zsh is installed
      register: omz_installed
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.oh-my-zsh"

    - name: Install oh-my-zsh
      register: install_omz
      changed_when: install_omz.rc == 0
      when: not omz_installed.stat.exists
      ansible.builtin.shell: set -o pipefail && curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh

    - name: Check if fast-syntax-highlighting is installed
      register: fsh_installed
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/fast-syntax-highlighting"

    - name: Install fast-syntax-highlighting for zsh
      register: install_fsh
      changed_when: install_fsh.rc == 0
      when: not fsh_installed.stat.exists
      ansible.builtin.git:
        repo: https://github.com/zdharma-continuum/fast-syntax-highlighting.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/fast-syntax-highlighting"


    - name: Check if Neovim is installed
      when: ansible_distribution != "Archlinux"
      register: nvim_installed
      ansible.builtin.stat:
        path: /opt/nvim-linux64

    - name: Install Neovim
      become: true
      when:
        - ansible_distribution != "Archlinux"
        - not nvim_installed.stat.exists
      ansible.builtin.unarchive:
        src: https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
        dest: /opt/nvim-linux64
        remote_src: true

    - name: Remove Neovim tarball
      register: remove_neovim_tarball
      changed_when: remove_neovim_tarball.rc == 0
      when:
        - ansible_distribution != "Archlinux"
        - not nvim_installed.stat.exists
      ansible.builtin.command: rm nvim-linux64.tar.gz

    - name: Add Neovim to path
      when: ansible_distribution != "Archlinux"
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.env"
        line: 'export PATH=$PATH:/opt/nvim-linux64/bin'
        state: present
        create: true
        mode: "700"

    - name: Prepare directories for symlinks
      register: symlink_prep
      changed_when: symlink_prep.rc == 0
      loop:
        - .local/bin
        - .config/gtk-3.0
        - .config/hypr
        - .config/zed
      ansible.builtin.command: mkdir -p {{ ansible_env.HOME }}/{{ item }}

    - name: Delete conflicting files
      register: delete_conflicting
      changed_when: delete_conflicting.rc == 0
      loop:
        - .bashrc
        - .zshrc
      ansible.builtin.command: rm {{ ansible_env.HOME }}/{{ item }}

    - name: Set up symlinks using GNU Stow
      register: stow_result
      changed_when: 'stow_result.stderr is search("LINK: ")'
      loop:
        - basic
        - hyprland
        - nvim
        - scripts
        - wezterm
        - zed
        - zsh
      ansible.builtin.command: stow {{ item }} --target {{ ansible_env.HOME }} --verbose=2

    - name: Set default shell to zsh
      register: default_shell_zsh
      changed_when: default_shell_zsh.rc == 0
      become: true
      ansible.builtin.command: chsh -s /usr/bin/zsh {{ ansible_env.USER }}

    - name: Update npm
      changed_when: false
      failed_when: false
      environment:
        NODE_NO_WARNINGS: "1"
      ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/mise x node -- npm i -g npm@latest --no-warnings"

    - name: Install tree-sitter-cli
      register: install_tree_sitter_cli
      changed_when: install_tree_sitter_cli.rc == 0
      ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/mise x rust -- cargo install tree-sitter-cli"

    - name: Install Neovim npm package
      register: install_neovim_npm_provider
      changed_when: install_neovim_npm_provider.rc == 0
      environment:
        NODE_NO_WARNINGS: "1"
      ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/mise x node -- npm i -g neovim@latest --no-warnings"

    - name: Install Neovim pip package
      register: install_neovim_python_provider
      changed_when: install_neovim_python_provider.rc == 0
      ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/mise x python -- pip install neovim"
