- name: Set up dotfiles
  hosts: localhost
  any_errors_fatal: true

  tasks:
    - name: Install packages for Arch
      become: true
      when: ansible_distribution == "Archlinux"
      community.general.pacman:
        state: latest
        update_cache: true
        name:
          - base
          - base-devel
          - go
          - rust
          - nodejs-lts-jod
          - npm
          - python
          - mise
          - git
          - net-tools
          - bind
          - curl
          - wget
          - zsh
          - ripgrep
          - fzf
          - fd
          - plocate
          - unzip
          - stow
          - neovim

    - name: Yay already installed
      when: ansible_distribution == "Archlinux"
      register: yay_installed
      ansible.builtin.stat:
        path: /usr/bin/yay

    - name: Download yay
      when:
        - ansible_distribution == "Archlinux"
        - not yay_installed.stat.exists
      ansible.builtin.git:
        repo: https://aur.archlinux.org/yay.git
        dest: yay

    - name: Yay makepkg
      when:
        - ansible_distribution == "Archlinux"
        - not yay_installed.stat.exists
      changed_when: yay_makepkg.rc == 0
      register: yay_makepkg
      ansible.builtin.command:
        chdir: ./yay
        cmd: makepkg -f

    - name: Find correct pkg file to install
      when:
        - ansible_distribution == "Archlinux"
        - not yay_installed.stat.exists
      failed_when: pkg_filename.matched == 0
      register: pkg_filename
      ansible.builtin.find:
        paths: ./yay
        file_type: file
        patterns: '^yay-\d.*\.pkg.tar.zst$'
        use_regex: true
        limit: 1

    - name: Install yay
      become: true
      when:
        - ansible_distribution == "Archlinux"
        - not yay_installed.stat.exists
      community.general.pacman:
        state: present
        name: "{{ pkg_filename.files[0].path }}"

    - name: Install packages for Ubuntu
      become: true
      when: ansible_distribution == "Ubuntu"
      ansible.builtin.apt:
        name:
          - unzip
          - git
          - curl
          - wget
          - zsh
          - plocate
          - stow
        state: present

    - name: Check if mise is installed
      when: ansible_distribution == "Ubuntu"
      register: mise_installed
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.local/bin/mise"

    - name: Install mise
      when:
        - ansible_distribution == "Ubuntu"
        - mise_installed.stat.exists
      register: install_mise
      changed_when: install_mise.rc == 0
      ansible.builtin.shell: set -o pipefail && curl https://mise.run | sh

    - name: Install mise tools on Arch
      when: ansible_distribution == "Archlinux"
      register: install_mise_tools_arch
      changed_when: install_mise_tools_arch.rc == 0
      ansible.builtin.command: "/usr/bin/mise use -g -y usage bun"

    - name: Install mise tools on Ubuntu
      when: ansible_distribution == "Ubuntu"
      register: install_mise_tools_ubuntu
      changed_when: install_mise_tools_ubuntu.rc == 0
      ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/mise use -g -y usage node bun go rust python"

    - name: Check if Neovim is installed
      when: ansible_distribution != "Archlinux"
      register: nvim_installed
      ansible.builtin.stat:
        path: /opt/nvim-linux64

    - name: Install Neovim
      become: true
      when:
        - ansible_distribution != "Archlinux"
        - not nvim_installed.stat.exists
      ansible.builtin.unarchive:
        src: https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
        dest: /opt/nvim-linux64
        remote_src: true

    - name: Remove Neovim tarball
      register: remove_neovim_tarball
      changed_when: remove_neovim_tarball.rc == 0
      when:
        - ansible_distribution != "Archlinux"
        - not nvim_installed.stat.exists
      ansible.builtin.command: rm nvim-linux64.tar.gz

    - name: Add Neovim to path
      when: ansible_distribution != "Archlinux"
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.env"
        line: 'export PATH=$PATH:/opt/nvim-linux64/bin'
        state: present
        create: true
        mode: "700"

    - name: Prepare directories for symlinks
      register: symlink_prep
      changed_when: symlink_prep.rc == 0
      loop:
        - .local/bin
        - .config/hypr
        - .config/zed
      ansible.builtin.command: mkdir -p {{ ansible_env.HOME }}/{{ item }}

    - name: Delete conflicting files
      register: delete_conflicting
      changed_when: delete_conflicting.rc == 0
      loop:
        - .bashrc
        - .zshrc
      ansible.builtin.command: rm {{ ansible_env.HOME }}/{{ item }}

    - name: Set up symlinks using GNU Stow
      register: stow_result
      changed_when: 'stow_result.stderr is search("LINK: ")'
      loop:
        - basic
        - hyprland
        - nvim
        - scripts
        - wezterm
        - zed
        - zsh
      ansible.builtin.command: stow {{ item }} --target {{ ansible_env.HOME }} --verbose=2

    - name: Set default shell to zsh
      register: default_shell_zsh
      changed_when: default_shell_zsh.rc == 0
      become: true
      ansible.builtin.command: chsh -s /usr/bin/zsh {{ ansible_env.USER }}
